name: VeriFlow | Regression Tests [BrowserStack]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: false

run-name: "üë∑üöß Parallel Regression | Env: ${{ github.event.inputs.appEnvironment || 'UAT' }} | Threads: ${{ github.event.inputs.parallelRuns }}"

on:
  workflow_dispatch:
    inputs:
      testGroup:
        description: 'Select Regression Test Group'
        required: true
        type: choice
        options:
          - 'ALL'
          - 'REGRESSION'
          - 'SMOKE'
      appEnvironment:
        description: 'Select Test Environment'
        required: true
        type: choice
        options:
          - 'UAT'
          - 'QA'
      parallelRuns:
        description: 'Number of Parallel Threads'
        required: true
        default: '5'
        type: string
      enableSlackReport:
        description: 'Enable Slack Notifications'
        required: true
        default: false
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    name: 'Run Playwright Tests via BrowserStack Local Tunnel'

    env:
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: ‚úÖ Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version      

      - name: üê≥ Start TimescaleDB via Docker Compose
        run: docker-compose -f docker-compose.yml up -d

      - name: üïì Wait for TimescaleDB to become ready
        run: |
          for container in veriflow_timescale veriflow_test_1 veriflow_test_2; do
            echo "üîÑ Waiting for $container..."
            docker exec $container bash -c "until pg_isready -U admin; do sleep 1; done"
          done

      - name: üì° Download BrowserStack Local Binary
        run: |
          curl -L "https://www.browserstack.com/browserstack-local/BrowserStackLocal-linux-x64.zip" -o bslocal.zip
          unzip bslocal.zip
          chmod +x BrowserStackLocal

      - name: üîå Start BrowserStack Local Tunnel
        run: ./BrowserStackLocal --key ${{ secrets.BROWSERSTACK_ACCESS_KEY }} --local-identifier veriflow-ci &
        continue-on-error: false

      - name: üß™ Run Playwright Tests on BrowserStack
        run: |
          mkdir -p test-results/

          TEST_GROUP=$(echo "${{ github.event.inputs.testGroup }}" | tr '[:upper:]' '[:lower:]')

          if [ "$TEST_GROUP" = "regression" ]; then
            GREP="--grep '\\[Regression\\]'"
          elif [ "$TEST_GROUP" = "smoke" ]; then
            GREP="--grep '\\[Smoke\\]'"
          else
            GREP=""
          fi

          echo "üß™ Running Playwright tests with: $GREP"
          npx playwright test tests/testcases/ $GREP \
            --project=BrowserStack \
            --workers=${{ github.event.inputs.parallelRuns }}

      - name: üìä Generate Allure Report
        run: npx allure generate test-results/ --clean -o allure-report/

      - name: ‚òÅÔ∏è Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report/
          retention-days: 7

      - name: ‚òÅÔ∏è Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
          retention-days: 7

      - name: üîî Send Slack Report
        if: ${{ github.event.inputs.enableSlackReport == 'true' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_TOKEN }}
          SLACK_COLOR: '#00FF00'
        with:
          args: "‚úÖ *Playwright Tests Completed* for *${{ github.event.inputs.testGroup }}* on *${{ github.event.inputs.appEnvironment }}* with *${{ github.event.inputs.parallelRuns }}* threads."















# jobs:
#   test:
#     runs-on: ubuntu-latest
#     name: 'Execute Playwright Parallel Tests on BrowserStack'
#     env:
#       BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
#       BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
#       BROWSERSTACK_PARALLEL_RUNS: ${{ github.event.inputs.parallelRuns }}
#       CICD: true

#     steps:
#       - name: 'Checkout Code'
#         uses: actions/checkout@v4

#       - name: 'Set up Node.js'
#         uses: actions/setup-node@v4
#         with:
#           node-version: '18'

#       - name: 'Install Dependencies'
#         run: npm ci

#       - name: 'Install Playwright Browsers'
#         run: npx playwright install --with-deps

#       - name: 'Run Playwright Tests in Parallel on BrowserStack'
#         id: test_execution
#         run: |
#           mkdir -p test-results/
          
#           PLAYWRIGHT_COMMAND="BROWSERSTACK_USERNAME=${{ secrets.BROWSERSTACK_USERNAME }} \
#           BROWSERSTACK_ACCESS_KEY=${{ secrets.BROWSERSTACK_ACCESS_KEY }} \
#           npx playwright test tests/testcases/api/ --grep '${{ github.event.inputs.testGroup }}' \
#           --project=${{ github.event.inputs.browserConfig }} \
#           --workers=${{ github.event.inputs.parallelRuns }} \
#           --retries=${{ github.event.inputs.enableTestRetry }}"

#           echo "Executing: $PLAYWRIGHT_COMMAND"
#           eval $PLAYWRIGHT_COMMAND

#       - name: 'Generate Allure Report'
#         run: |
#           mkdir -p test-results/
#           npx allure generate test-results/ --clean -o allure-report/

#       - name: 'Upload Allure Report'
#         uses: actions/upload-artifact@v4
#         with:
#           name: allure-report
#           path: allure-report/
#           retention-days: 7

#       - name: 'Upload Test Results'
#         uses: actions/upload-artifact@v4
#         with:
#           name: test-results
#           path: test-results/
#           retention-days: 7

#       - name: 'Send Slack Report (Optional)'
#         if: env.ENABLE_SLACK_REPORT == 'true'
#         uses: rtCamp/action-slack-notify@v2
#         env:
#           SLACK_WEBHOOK: ${{ secrets.SLACK_TOKEN }}
#         with:
#           args: 'Parallel Regression Tests completed for VeriFlow - Env: ${{ github.event.inputs.appEnvironment }} - Threads: ${{ github.event.inputs.parallelRuns }}'

#   publish-report:
#     needs: test
#     runs-on: ubuntu-latest
#     name: 'Generate Test Reports üìä'
#     steps:
#       - name: 'Download Test Results'
#         uses: actions/download-artifact@v4
#         with:
#           name: 'test-results'
#           path: test-results/

#       - name: 'Generate Report'
#         run: ./generate-report.sh test-results/
