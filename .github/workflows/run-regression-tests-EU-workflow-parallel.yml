name: VeriFlow | Regression Tests

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: false

run-name: "üë∑üöß[#${{ github.run_number }}][REGRESSION TESTS] üåçEnv: ${{ github.event.inputs.appEnvironment || 'UAT' }} | üè∑Ô∏èRelease: ${{ github.event.inputs.appRelease || 'latest' }} | üåç BrowserStack"

on:
  schedule:
    - cron: '30 4  * * 1-5' # 05:30 CET
    - cron: '30 5  * * 1-5' # 06:30 CET
    - cron: '30 6  * * 1-5' # 07:30 CET
    - cron: '30 7  * * 1-5' # 08:30 CET
    - cron: '00 16 * * 1-5' # 17:00 CET
    - cron: '00 18 * * 1-5' # 19:00 CET
    - cron: '00 20 * * 1-5' # 21:00 CET

  workflow_dispatch:
    inputs:
      testGroup:
        description: 'Select the Regression Test Group'
        required: true
        type: choice
        options:
          - 'ALL'
          - 'REGRESSION'
          - 'SMOKE'
      appEnvironment:
        description: 'Select the VeriFlow environment:'
        required: true
        type: choice
        options:
          - 'UAT'
          - 'QA'
          - 'DEV'
      browserConfig:
        description: 'Select Browser for Testing'
        required: true
        type: choice
        options:
          - 'chrome'
          - 'firefox'
          - 'edge'
          - 'safari'
      appRelease:
        description: 'Enter the application release:'
        required: true
        default: 'latest'
        type: string
      enableTestRetry:
        description: 'Enable retry for failing tests?'
        required: true
        default: false
        type: boolean
      enableXrayImport:
        description: 'Enable test results upload to XRay?'
        required: true
        default: false
        type: boolean
      enableSlackReport:
        description: 'Enable test results notification on Slack?'
        required: true
        default: false
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    name: 'Execute Playwright Regression Tests on BrowserStack üõ†Ô∏è'
    env:
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
      APP_ENVIRONMENT: ${{ github.event.inputs.appEnvironment || 'UAT' }}
      APP_RELEASE: ${{ github.event.inputs.appRelease || 'latest' }}
      ENABLE_TEST_RETRY: ${{ github.event.inputs.enableTestRetry || false }}
      ENABLE_XRAY_IMPORT: ${{ github.event.inputs.enableXrayImport || false }}
      ENABLE_SLACK_REPORT: ${{ github.event.inputs.enableSlackReport || false }}
      CICD: true

    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Set up Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Install Playwright Browsers'
        run: npx playwright install --with-deps

      - name: 'Run Playwright Regression Tests on BrowserStack'
        id: test_project
        run: |
          mkdir -p test-results/
          
          PLAYWRIGHT_COMMAND="BROWSERSTACK_USERNAME=${{ secrets.BROWSERSTACK_USERNAME }} \
          BROWSERSTACK_ACCESS_KEY=${{ secrets.BROWSERSTACK_ACCESS_KEY }} \
          npx playwright test tests/testcases/api/ --grep '${{ github.event.inputs.testGroup }}' \
          --project=${{ github.event.inputs.browserConfig }} \
          --retries=${{ github.event.inputs.enableTestRetry }} \
          --workers=4"

          echo "Executing command: $PLAYWRIGHT_COMMAND"
          eval $PLAYWRIGHT_COMMAND

      - name: 'Generate Allure Report'
        run: |
          mkdir -p test-results/
          npx allure generate test-results/ --clean -o allure-report/

      - name: 'Upload Allure Report'
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report/
          retention-days: 7

      - name: 'Upload Test Results'
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
          retention-days: 7

      - name: 'Post Slack Report (Optional)'
        if: env.ENABLE_SLACK_REPORT == 'true'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_TOKEN }}
        with:
          args: 'Regression Tests completed for VeriFlow - Env: ${{ env.APP_ENVIRONMENT }}'

  publish-report:
    needs: test
    runs-on: ubuntu-latest
    name: 'Generate Test Reports üìä'
    steps:
      - name: 'Download Test Results'
        uses: actions/download-artifact@v4
        with:
          name: 'test-results'
          path: test-results/

      - name: 'Generate Report'
        run: ./generate-report.sh test-results/
