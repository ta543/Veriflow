name: VeriFlow | TimescaleDB Regression Tests [Multiple Threads]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

run-name: "ðŸš€ Parallel Regression | Env: ${{ github.event.inputs.appEnvironment || 'UAT' }} | Threads: ${{ github.event.inputs.parallelRuns || '4' }}"

on:
  schedule:
    - cron: "0 0 * * *"  # Runs daily at midnight UTC
  workflow_dispatch:
    inputs:
      appEnvironment:
        description: 'Environment (e.g. UAT, STAGE)'
        required: false
        default: 'UAT'
      parallelRuns:
        description: 'Number of parallel workers'
        required: false
        default: '4'

jobs:
  test:
    runs-on: ubuntu-latest
    name: 'Execute Playwright Parallel Tests for TimescaleDB'
    env:
      CICD: true

    services:
      timescaledb:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: regression
          POSTGRES_PASSWORD: regression
        ports:
          - "5432:5432"
        options: >-
          --health-cmd "pg_isready -U regression -d testdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Set up Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Install Playwright Browsers'
        run: npx playwright install --with-deps

      - name: 'Run Regression Tests'
        id: test_execution
        run: |
          mkdir -p test-results/

          echo "Running Playwright regression tests with ${{ github.event.inputs.parallelRuns || 4 }} workers"
          npx playwright test --grep "\\[Regression\\]" --workers=${{ github.event.inputs.parallelRuns || 4 }} --reporter=line,allure-playwright

      - name: 'Generate Allure Report'
        run: |
          mkdir -p allure-report/
          npx allure generate test-results/ --clean -o allure-report/

      - name: 'Upload Allure Report'
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report/
          retention-days: 7

      - name: 'Upload Raw Test Results'
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
          retention-days: 7

  publish-report:
    needs: test
    runs-on: ubuntu-latest
    name: 'Generate Test Reports ðŸ“Š'
    steps:
      - name: 'Download Test Results'
        uses: actions/download-artifact@v4
        with:
          name: 'test-results'
          path: test-results/

      - name: 'Generate Report'
        run: ./generate-report.sh test-results/
