name: VeriFlow | Run Class Tests

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: false

run-name: 'üë∑üöß[#${{ github.run_number }}][${{ github.event.inputs.testConfig }} Tests] üåçEnv: ${{ github.event.inputs.appEnvironment }} | üè∑Ô∏èRelease: ${{ github.event.inputs.appRelease }} | üì±Device: ${{ github.event.inputs.deviceConfig }}'

on:
  workflow_dispatch:
    inputs:
      appEnvironment:
        description: 'Select the VeriFlow application environment:'
        required: true
        type: choice
        options:
          - 'UAT'
          - 'QA'
          - 'DEV'
      appRelease:
        description: 'Enter the VeriFlow application release:'
        required: true
        default: 'latest'
        type: string
      testConfig:
        description: 'Select the VeriFlow Tests'
        required: true
        type: choice
        options:
          - 'FeatureA'
          - 'FeatureB'
          - 'FeatureC'
          - 'FeatureD'
      deviceConfig:
        description: 'Select the device configuration:'
        required: true
        type: choice
        options:
          - 'GooglePixel4XL'
          - 'GalaxyS23Ultra'
          - 'iPhone14Pro'
          - 'iPhone15ProMax'
      devicePlatform:
        description: 'Select the device platform:'
        required: true
        type: choice
        options:
          - 'android'
          - 'ios'
      enableTestRetry:
        description: 'Enable re-run of failing tests?'
        required: true
        default: false
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    name: 'Build & Execute Tests üõ†Ô∏è'
    env:
      PERSONAL_GITHUB_KEY: ${{ secrets.PERSONAL_GITHUB_KEY }}
      CICD: true

    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Set up Elixir'
        uses: erlef/setup-elixir@v1
        with:
          elixir-version: '1.14.0'
          otp-version: '25.0'

      - name: 'Install Dependencies'
        run: mix deps.get

      - name: 'Verify Chrome Installation'
        run: google-chrome --version

      - name: 'Start Headless Chrome'
        run: |
          export DISPLAY=:99
          nohup google-chrome --headless --disable-gpu --remote-debugging-port=9222 --no-sandbox --disable-dev-shm-usage &

      - name: 'Compile Project'
        id: compile_project
        run: mix compile
        continue-on-error: true

      - name: 'Run Elixir Tests'
        id: test_project
        env:
          CHROME_HEADLESS: true
        run: |
          mkdir -p test-results/
          TEST_CONFIG="${{ github.event.inputs.testConfig }}"
          TEST_CONFIG="${TEST_CONFIG// /}Tests"

          MIX_COMMAND="mix test --trace \
          --env=${{ github.event.inputs.appEnvironment }} \
          --release=${{ github.event.inputs.appRelease }} \
          --device=${{ github.event.inputs.deviceConfig }} \
          --platform=${{ github.event.inputs.devicePlatform }} \
          --retry=${{ github.event.inputs.enableTestRetry }} \
          --formatter JUnitFormatter --formatter ExUnit.CLIFormatter"

          echo "Executing command: $MIX_COMMAND"
          eval $MIX_COMMAND

      - name: 'Generate Allure Report'
        run: |
          mkdir -p test-results/
          allure generate test-results/ --clean -o allure-report/

      - name: 'Upload Allure Report'
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report/
          retention-days: 7

      - name: 'Upload Test Results'
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
          retention-days: 7

      - name: 'Post Comment on PR'
        if: github.event_name == 'pull_request' && github.actor != 'dependabot[bot]' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const url = `${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const testMessage = process.env.test_result === 'success'
              ? '‚úÖ Tests passed successfully.'
              : `‚ùå Tests failed. [View Workflow Run](${url})`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: testMessage
            })
