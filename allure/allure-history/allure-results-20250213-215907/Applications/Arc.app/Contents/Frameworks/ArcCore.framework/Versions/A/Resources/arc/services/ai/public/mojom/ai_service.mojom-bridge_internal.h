// arc/services/ai/public/mojom/ai_service.mojom-bridge_internal.h is auto generated by mojom_bindings_generator.py, do not edit

#import <Foundation/Foundation.h>

namespace {

template <class T>
struct EnumConversionTraits {};template <>
struct EnumConversionTraits<arc::interop::AIServiceType> {
  using BridgeType = AIServiceType;
};

template <>
struct EnumConversionTraits<AIServiceType> {
  using CxxInteropType = arc::interop::AIServiceType;
};
template <>
struct EnumConversionTraits<arc::interop::AIServiceError> {
  using BridgeType = AIServiceError;
};

template <>
struct EnumConversionTraits<AIServiceError> {
  using CxxInteropType = arc::interop::AIServiceError;
};
template <>
struct EnumConversionTraits<arc::interop::AIEmbeddingSupportedModel> {
  using BridgeType = AIEmbeddingSupportedModel;
};

template <>
struct EnumConversionTraits<AIEmbeddingSupportedModel> {
  using CxxInteropType = arc::interop::AIEmbeddingSupportedModel;
};
template <>
struct EnumConversionTraits<arc::interop::AIEmbeddingMethod> {
  using BridgeType = AIEmbeddingMethod;
};

template <>
struct EnumConversionTraits<AIEmbeddingMethod> {
  using CxxInteropType = arc::interop::AIEmbeddingMethod;
};
template <>
struct EnumConversionTraits<arc::interop::AIInferenceModelType> {
  using BridgeType = AIInferenceModelType;
};

template <>
struct EnumConversionTraits<AIInferenceModelType> {
  using CxxInteropType = arc::interop::AIInferenceModelType;
};
template <typename CxxInteropType>
inline typename EnumConversionTraits<CxxInteropType>::BridgeType FromCxxInteropType(const CxxInteropType& value) {
  return static_cast<typename EnumConversionTraits<CxxInteropType>::BridgeType>(value);
}

template <typename BridgeType>
inline typename EnumConversionTraits<BridgeType>::CxxInteropType FromBridgeType(const BridgeType& value) {
  return static_cast<typename EnumConversionTraits<BridgeType>::CxxInteropType>(value);
}

}  // namespace
